# 日志级别(由低到高):
# ALL   打开所有日志记录
# DEBUG 调试信息
# INFO  运行信息
# WARN  警告信息,有潜在错误
# ERROR 错误信息,但不影响程序运行
# FATAL 严重信息,会导致程序退出
# OFF   关闭所有日志记录

# 日志的输出方式:
# org.apache.log4j.ConsoleAppender(控制台)
# org.apache.log4j.FileAppender(文件)
# org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)
# org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)
# org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)

# 日志的输出格式:
# org.apache.log4j.HTMLLayout(以HTML表格形式布局)
# org.apache.log4j.PatternLayout(可以灵活地指定布局模式)
# org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串)
# org.apache.log4j.TTCCLayout(包含日志产生的时间,线程,类别等信息)

# 灵活指定日志输出格式:
# %c: 输出所属的类目,通常就是所在类的全名
# %d: 输出日志时间点的日期或时间,默认格式为ISO8601,也可以在其后指定格式,比如: %d{yyyy-MM-dd HH:mm:ss} 输出类似:2002-10-18 22:10:28
# %l: 输出日志事件的发生位置,包括类目名,发生的线程,在代码中的行数.举例: Testlog4.main(TestLog4.java:10)
# %m: 输出代码中指定的消息
# %n: 输出一个回车换行符,Windows平台为"/r/n",Unix平台为"/n"
# %p: 输出优先级,即DEBUG,INFO,WARN,ERROR,FATAL
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %t: 输出产生该日志事件的线程名

# 将所有包的日志级别设为INFO(输出INFO及以上级别日志)
# 为这些日志配置4种日志输出并命名为: console,info,warn,error(这些名字随便取)
log4j.rootLogger=INFO,console,info,warn,error
# 将org与com.alibaba包的日志级别设为OFF(关闭所有日志记录)
log4j.logger.org=OFF
log4j.logger.com.alibaba=OFF

# console
# 输出方式为: 控制台输出
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.Target=System.out
# 输出级别为INFO(包括INFO,WARN,ERROR,FATAL)
log4j.appender.console.Threshold=INFO
# 输出格式为: 灵活指定格式
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n

# info
# 输出方式为: 每天产生一个日志文件
log4j.appender.info=org.apache.log4j.DailyRollingFileAppender
# 日志文件位置: ${catalina.home}/logs/paulandcode/base/info.log(${catalina.home}指: D:/Java/apache-tomcat-9.0.0)
log4j.appender.info.File=${catalina.home}/logs/paulandcode/base/info.log
# 每日生成的日志文件命名方式: info.log.2017-05-24
log4j.appender.info.append=true
log4j.appender.info.datePattern='.'yyyy-MM-dd
log4j.appender.info.Threshold=INFO
log4j.appender.info.layout=org.apache.log4j.PatternLayout
log4j.appender.info.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n

# warn
log4j.appender.warn=org.apache.log4j.DailyRollingFileAppender
log4j.appender.warn.File=${catalina.home}/logs/paulandcode/base/warn.log
log4j.appender.warn.append=true
log4j.appender.warn.datePattern='.'yyyy-MM-dd
log4j.appender.warn.Threshold=WARN
log4j.appender.warn.layout=org.apache.log4j.PatternLayout
log4j.appender.warn.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n

# error
log4j.appender.error=org.apache.log4j.DailyRollingFileAppender
log4j.appender.error.File=${catalina.home}/logs/paulandcode/base/error.log
log4j.appender.error.append=true
log4j.appender.error.datePattern='.'yyyy-MM-dd
log4j.appender.error.Threshold=ERROR
log4j.appender.error.layout=org.apache.log4j.PatternLayout
log4j.appender.error.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n

# slowsql
log4j.logger.com.alibaba.druid.filter.stat.StatFilter=ERROR,slowsql
log4j.appender.slowsql=org.apache.log4j.DailyRollingFileAppender
log4j.appender.slowsql.File=${catalina.home}/logs/paulandcode/base/slow_sql.log
log4j.appender.slowsql.append=true
log4j.appender.slowsql.datePattern='.'yyyy-MM-dd
log4j.appender.slowsql.layout=org.apache.log4j.PatternLayout
log4j.appender.slowsql.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %m %n

# sql
# 将com.paulandcode.dao包下的日志级别设为DEBUG
# 为这些日志配置1种日志输出并命名为:sql
log4j.logger.com.paulandcode.dao=DEBUG,sql
log4j.appender.sql=org.apache.log4j.ConsoleAppender
log4j.appender.sql.Target=System.out
log4j.appender.sql.layout=org.apache.log4j.PatternLayout
log4j.appender.sql.layout.ConversionPattern=%m %n