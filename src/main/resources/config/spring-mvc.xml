<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd        
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
     	http://www.springframework.org/schema/aop 
     	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/mvc 
     	http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

	<!-- 该文件作用: 进行SpringMVC相关配置,包括: -->
    <!--    (1)开启组件扫描 -->
    <!--    (2)访问静态资源的处理 -->
    <!--    (3)aop动态代理实现方式 -->
    <!--    (4)启动注解驱动并配置返回的json -->
    <!--    (5)配置JSP视图解析器  -->
    <!--    (6)配置MultipartFile文件上传  -->

	<!--================================================== 加载配置文件 ==================================================-->
	<!-- 由于SpringMVC前端控制器在初始化的时候只加载了spring-mvc.xml这个配置文件，所以想在项目中用@Value("${password.algorithmName}")这样的注解读取config.properties中的配置，需要在此处设置 -->
	<context:property-placeholder location="classpath*:config/config.properties"/>
	
	<!--================================================== 开启组件扫描 ==================================================-->
	<!-- 它背后注册了很多用于解析注解的处理器,其中就包括<context:annotation-config/>配置的注解所使用的处理器 -->  
    <!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config> --> 
	<context:component-scan base-package = "com.paulandcode"/>
	
	<!--================================================== 访问静态资源的处理 ==================================================-->
	<!-- 配置<mvc:default-servlet-handler/>后,spring会在SpringMVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler. -->
	<!-- 它会对进入DispatcherServlet的URL进行筛查,如果发现是静态资源的请求,就将该请求转由Web应用服务器默认的Servlet处理,如果不是静态资源的请求,才由DispatcherServlet继续处理. -->
	<mvc:default-servlet-handler/>
	
    <!--================================================== 静态资源映射  ==================================================-->
    <mvc:resources mapping="/static/**" location="/WEB-INF/static/"/>
    
   	<!--================================================== 配置JSP视图解析器  ==================================================-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

	<!--================================================== aop动态代理实现方式 ==================================================-->
	<!-- 在spring3以上版本中使用spring的依赖注入(注解或者xml方式)和aop功能时,发现了一个问题: -->
	<!-- 如果不设置<aop:aspectj-autoproxy  proxy-target-class="true"/>,那么在获取bean时一直报: (无论通过name还是type都获取不到bean) -->
    <!-- org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type 或者-->
    <!-- java.lang.ClassCastException: com.sun.proxy.$Proxy12 cannot be cast to cn.edu.nuc.SpringTest.service.impl.DemoServiceImpl -->
    <!-- proxy-target-class属性值决定是基于接口的还是基于类的代理被创建: -->
    <!-- 被设置为true时,为基于类的代理,这时需要cglib库.被设置为false或者这个属性被省略时,是标准的JDK基于接口的代理. -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!--================================================== 配置注解驱动  ==================================================-->
	<mvc:annotation-driven>
		<!-- 配置SpringMVC的消息装换机制 -->
        <!-- (1)该机制的作用: 完成请求报文到对象(序列化)和对象到响应报文(反序列化)的转换,@RequestBody和@ResponseBody就是利用这种机制. -->
        <!-- (2)若<mvc:message-converters>的子节点不存在或它的属性register-defaults为true,则自动加入spring自带的消息转换器,如: StringHttpMessageConverter, -->
        <!--    ByteArrayHttpMessageConverter,BufferedImageHttpMessageConverter,XmlAwareFormHttpMessageConverter,ResourceHttpMessageConverte等.  -->
        <!-- (3)此处多加了一个阿里云的fastjson消息转换器,其特点如下: -->
        <!--        <a>需要导包: <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.21</version> -->
        <!--        <b>速度极快,号称超越其他任何JackJson -->
        <!--        <c>各种支持,包括: Java Bean,List,Map,日期,Enum,范型,自省等 -->
        <!--        <d>无依赖,能够直接运行在Java SE 5.0以上版本 -->
        <!--        <e>fastjson API入口类是com.alibaba.fastjson.JSON,常用静态方法如下: -->
        <!--             public static final Object parse(String text);                                 // 把JSON文本parse为JSONObject或者JSONArray -->
        <!--             public static final JSONArray parseArray(String text);                         // 把JSON文本parse成JSONArray -->
        <!--             public static final  List parseArray(String text, Class clazz);                // 把JSON文本parse成JavaBean集合 -->
        <!--             public static final JSONObject parseObject(String text)；                      				// 把JSON文本parse成JSONObject -->
        <!--             public static final  T parseObject(String text, Class clazz);                  // 把JSON文本parse为JavaBean -->
        <!--             public static final Object toJSON(Object javaObject);                          // 将JavaBean转换为JSONObject或者JSONArray -->
        <!--             public static final String toJSONString(Object object);                        // 将JavaBean序列化为JSON文本 -->
        <!--             public static final String toJSONString(Object object, boolean prettyFormat);  // 将JavaBean序列化为带格式的JSON文本 -->
		<mvc:message-converters register-defaults="true">
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
            	<!-- MappingJacksonHttpMessageConverter会默认设置contentType为application/json,在IE9下返回会出现提示下载的现象,出现这种情况可以手动指定头信息为"text/html" -->
                <property name="supportedMediaTypes">
                    <list>
                    	<!-- 这里顺序不能写反,一定要先写text/html,否则IE下会出现下载提示. -->
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <!-- features: 生成json字符串的特征配置 -->
                <!-- 默认配置为: QuoteFieldNames(输出key时使用双引号),SkipTransientField(忽略类中属性为transient的变量). -->
                <property name="features">
                    <list>
                    	<!-- 输出值为null的字段 -->
                        <value>WriteMapNullValue</value>
                        <!-- 输出key时使用双引号 -->
                        <value>QuoteFieldNames</value>
                        <!-- 对Date属性进行格式化 -->
                        <value>WriteDateUseDateFormat</value>
						<!-- 禁用fastjson循环引用检测 -->
						<value>DisableCircularReferenceDetect</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
	</mvc:annotation-driven>

	<!--================================================== 配置MultipartFile文件上传 ==================================================-->
	<!-- MultipartFile类常用的一些方法: -->
	<!-- String getContentType()       获取文件MIME类型 -->
	<!-- InputStream getInputStream()  后去文件流 -->
	<!-- String getName()              获取表单中文件组件的名字 -->
	<!-- String getOriginalFilename()  获取上传文件的原名 -->
	<!-- long getSize()                获取文件的字节大小，单位byte -->
	<!-- boolean isEmpty()             是否为空 -->
	<!-- void transferTo(File dest)    保存到一个目标文件中. -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 请求的编码格式,默认为iso-8859-1 -->
		<property name="defaultEncoding" value="UTF-8"/>
		<!-- 上传文件大小限制,单位为字节 -->
		<property name="maxUploadSize" value="1000000000"/>
		<!-- 上传文件的缓存路径 -->
		<!-- 该缓存路径在webapp下,junit加载配置文件时会将该路径当成resources路径,它不在resources中,所以会报错.如果是tomcat中,不会有该问题. -->
		<!-- <property name="uploadTempDir" value="fileUpload/temp"/> -->
	</bean>
	
</beans>